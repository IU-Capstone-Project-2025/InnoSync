version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend_net

  app:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DB_URL: ${DB_URL}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      JWT_SECRET: ${JWT_SECRET}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - backend_net

  frontend:
    build:
      context: ./frontend/innosync
      dockerfile: Dockerfile
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      - app
    networks:
      - backend_net

  ml:
    build: ./ML
    ports:
      - "8000:8000"
    environment:
      BACKEND_URL: ${BACKEND_URL}
    env_file: ./ML/.env
    restart: unless-stopped
    depends_on:
      - app
    networks:
      - backend_net

  nginx:
    image: nginx:stable-alpine
    container_name: nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /var/www/certbot:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - frontend
      - app
    networks:
      - backend_net

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /var/www/certbot:/var/www/certbot
      - /etc/letsencrypt:/etc/letsencrypt
    entrypoint: >
      /bin/sh -c 'trap exit TERM;
      while :; do sleep 1d & wait $${!}; certbot renew; done'
    networks:
      - backend_net

volumes:
  postgres_data:

networks:
  backend_net:
    driver: bridge
